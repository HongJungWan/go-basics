package main

import "fmt"

type myInt int

func (a myInt) add(b int) int {
	return int(a) + b
}

func main() {
	var a myInt = 10
	fmt.Println(a)

	var b int = 20
	fmt.Println(a.add(b))
}

/*
📌 함수와 메서드의 차이
- 함수 : 함수는 독립적인 코드 블록으로, 특정 타입에 속하지 않고 어디서든 호출할 수 있다.
-- `func 함수명(매개변수) 리턴타입 { ... }`

- 메서드 : 메서드는 특정 타입(구조체, 인터페이스 등)에 속한 함수이다.
-- `func (receiver 타입) 메서드명(매개변수) 리턴타입 { ... }`

-- 리시버로는 모든 로컬 타입들이 가능한데, 로컬 타입이란 해당 패키지 안에서 type 키워드로 선언된 타입들을 말한다.
-- 그래서 패키지 내 선언된 구조체, 별칭 타입들이 리시버가 될 수 있다.
-- 예를 들어, int와 같은 내장 타입들도 별칭 타입을 활용해서 메서드를 가질 수 있다.
-- 모든 사용자 정의 타입이 리시버 타입이 될 수 있기 때문에 기본 내장 타입도 별칭 타입으로 변환하여 메서드를 선언할 수 있다.


📌 메서드를 왜 사용하는가?
-- 좋은 코드란 결합도를 낮고 응집도가 높은 코드다.
-- 메서드는 데이터와 관련 기능을 묶기 때문에 코드 응집도를 높이는데 중요한 역할을 한다.
-- 응집도가 낮으면 새로운 기능을 추가할 때 흩어진 모든 부분을 검토하고 고쳐야 하는 문제가 발생한다.
-- 그렇기에 흩어진 코드 조각들을 관련된 데이터로 한 곳에 묶어 응집도를 높일 필요가 있다.
*/
