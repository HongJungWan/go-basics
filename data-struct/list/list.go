package main

import (
	"container/list"
	"fmt"
)

func main() {
	v := list.New()       // 1. 새로운 리스트 생성
	e4 := v.PushBack(4)   // 2. 리스트 뒤에 요소 추가
	e1 := v.PushFront(1)  // 3. 리스트 앞에 요소 추가
	v.InsertBefore(3, e4) // 4. e4 요소 앞에 요소 삽입
	v.InsertAfter(2, e1)  // 5. e1 요소 뒤에 요소 삽입

	for e := v.Front(); e != nil; e = e.Next() {
		fmt.Print(e.Value, " ") // 1 2 3 4
	}

	fmt.Println()

	for e := v.Back(); e != nil; e = e.Prev() {
		fmt.Print(e.Value, " ")
	}
}

/*
📌 Go 언어 컨테이너 패키지에서 리스트 자료구조를 제공한다.
📌 리스트(list)는 기본 자료구조로서 여러 데이터를 보관할 수 있다.
- 배열과 가장 큰 차이점은 배열은 연속된 메모리에 데이터를 저장하는 반면, 리스트는 불연속된 메모리에 데이터를 저장한다는 점이다.

리스트는 각 데이터를 담고 있는 요소들을 포인터로 연결한 자료구조다.
요소들이 포인터로 연결됐다고 해서 링크드 리스트(linked list)라고 부르기도 한다.

리스트를 구현하는 구조체 코드는 아래와 같다. 양방향 리스트다.
```
type Element struct { // 1. 구조체
	Value interface{} // 2. 데이터를 저장하는 필드
	Next *Element	  // 3. 다음 요소의 주소를 저장하는 필드
	Prev *Element	  // 4. 이전 요소의 주소를 저장하는 필드
}
```
이처럼 리스트는 서로 떨어진 Element 인스턴스들이 Next 포인터로 연결된 불연속 자료구조다.

📌 배열의 맨 앞에 값을 추가하는 경우 시간 복잡도 O(N)
📌 리스트의 맨 앞에 값을 추가하는 경우 시간 복잡도 O(1)

📌 배열의 특정 요소에 접근하는 경우 시간 복잡도 O(1)
📌 리스트의 특정 요소에 접근하는 경우 시간 복잡도 O(N)

---
📌 데이터 지역성(data locality)
데이터 지역성은 데이터가 밀집한 정도를 말한다. 데이터 로컬리티라고도 한다. 배열과 리스트를 선택할 때 데이터 지역성을 고려해야 한다.
컴퓨터는 연산할 때 읽어온 데이터를 캐시라는 임시 저장소에 보관한다. 이때 정확히 필요한 데이터만 가져오는 게 아니라 그 주변 데이터를 같이 가져온다.
그 이유는 보통 연산이 일어난 당므에 높은 확률로 주변 데이터에 대한 연산이 이어지기 때문이다.
*/
