package main

import (
	"container/ring"
	"fmt"
)

func main() {
	r := ring.New(5) // 요소가 5개인 링 생성
	n := r.Len()     // 링 길이 반환

	for i := 0; i < n; i++ {
		r.Value = 'A' + i // 순회하면 모든 요소에 값 대입
		r = r.Next()
	}

	for j := 0; j < n; j++ {
		fmt.Printf("%c", r.Value) // 순회하며 값 출력
		r = r.Next()
	}

	fmt.Println()

	for j := 0; j < n; j++ {
		r = r.Prev()
		fmt.Printf("%c", r.Value)
	}
}

/*
📌 링(ring)은 맨 뒤의 요소과 맨 앞의 요소가 서로 연결된 자료구조다. (양방향 원형 버퍼)
- 링 자료구조에서는 시작도 없고 끝도 없다. 다만 현재 위치가 있을 뿐이다.

링은 저장할 개수가 고정되고, 오래된 요소는 지워도 되는 경우에 적합하다.
예를 들어 MS 워드는 `Ctrl+Z`를 눌러서 실행 취소를 할 수 있다.
이 기능을 지금까지 쓴 내용을 보관하고 있어야 한다. (워드가 무한정 실행 취소를 지원하는 건 아니다.)

링은 다음과 같은 경우에 사용된다.
- 실행 취소 기능 : 문서 편집기 등에서 일정한 개수의 명령을 저장하고 실행 취소하는 경우
- 고정 크기 버퍼 기능 : 데이터에 따라 버퍼가 증가되지 않고 고정된 길이로 쓸 때
- 리플레이 기능 : 게임 등에서 최근 플레이 10초를 다시 리플레이할 때와 같이 고정된 길이의 리플레이 기능을 제공할 때
*/
