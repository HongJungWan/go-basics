package main

/*
📌 고루틴은 Go 언어에서 관리하는 경량 스레드다.
- 함수나 명령을 동시에 수행할 때 사용한다.
- 여러 고루틴을 갖는 프로그램을 코딩하는 것을 동시성 프로그래밍(Concurrent Programming)이라고 한다.

- 고루틴을 이용하면 여러 작업을 동시에 수행할 수 있다.
- 고루틴은 Go 언어에 내장된 기능으로 외부 라이브러리에 의존하지 않고 동시성 프로그램을 구현할 수 있다.
- 멀티코어 환경에서 CPU를 더 효율적으로 사용해 빠르게 작업을 완료할 수 있다.
- 고루틴은 기존 OS 스레드에서 발생되는 컨텍스트 스위칭에 따른 성능 손실을 최소화한다.
- 고루틴 간 메모리 간섭으로 인해 발생하는 문제점에 주의해야 한다.
*/

/*
📌 스레드란?
- 고루틴은 경량 스레드로 함수나 명령을 동시에 실행할 때 사용한다.
- 프로그램 시작점인 main() 함수 역시 고루틴에 의해서 실행된다.

- 한 번에 한 프로세스만 동작시키는 걸 싱글태스킹이라고 하고, 여럿을 동시에 동작시키는 걸 멀티태스킹이라고 한다.
- 프로세스는 메모리 공간에 로딩되어 동작하는 프로그램을 말한다. 프로세스는 스레드를 한 개 이상 가지고 있다. 스레드가 하나면 싱글 스레드 프로세스, 여럿이면 멀티 스레드 프로세스라 한다.
- 스레드는 프로세스 안의 세부 작업 단위다.

- 스레드는 실행 흐름이라고 볼 수 있다.
- 초기 컴퓨터에서 사용한 천공카드 다발을 스레드로 볼 수 있다.
- 이 명령어가 적힌 종이 다발을 CPU가 한 줄씩 읽어서 수행하는게 컴퓨터이고 CPU 코어는 한 번에 하나의 명령어 다발. 즉, 스레드를 수행할 수 있다.
- 원래 CPU 코어는 한 번에 한 명령밖에 수행할 수 없다. CPU 하나에 코어가 여럿이면 동시에 명령을 수행할 수 있다.

- 그런데 싱글 코어 CPU에서도 여러 프로그램을 한꺼번에 실행할 수 있다. 어떻게 단일 코어 컴퓨터에서 여러 프로그램을 동시에 돌릴 수 있을까?
- CPU 코어가 스레드를 빠르게 전환해가면서 수행하면 사용자 입장에서는 마치 동시에 수행하는 것처럼 보인다.
-- 스레드가 CPU 코어를 빠르게 교대로 점유하면 동시에 모든 스레드가 실행되는 것처럼 보인다.

- CPU 코어가 여러 스레드를 전환하면서 수행하면 더 많은 비용이 든다.
- 이것을 컨텍스트 스위칭 비용이라고 한다. 스레드를 전환하려면 현재 상태를 보관해야 한다. 그래야 다시 스레드가 전환되어 돌아올 때 마지막 실행한 상태부터 이어서 실행할 수 있기 때문이다.
- 이때 스레드의 명령 포인터(instruction pointer), 스택 메모리 등의 정보를 저장하게 되는데 이를 스레드 컨텍스트라고 한다.

- 스레드가 전환될 때마다 스레드 컨텍스트를 저장하고 복원하기 때문에 스레드 전환 비용이 들게되는 것이다.
- 적정 개수를 넘어 한 번에 너무 많은 스레드를 수행하면 성능이 저하된다.
-- 보통 코어 개수의 두 배 이상 스레드를 만들면 스위칭 비용이 많이 발생한다고 말한다.
-- 하지만 Go 언어에서는 CPU 코어마다 OS 스레드를 하나만 할당해서 사용하기 때문에 컨텍스트 스위칭 비용이 발생하지 않기 때문이다.
*/
